[
{
	"uri": "/",
	"title": "AWS General Immersion Day",
	"tags": [],
	"description": "",
	"content": "AWS General Immersion Day Basic Modules In this basic modules, you can learn various functions of each AWS foundational service.\nBasic modules consist of the following agenda:\nCompute - Amazon EC2 Network - Amazon VPC Security - AWS IAM Through each hands on lab, let\u0026rsquo;s find out the characteristics of each service.\n"
},
{
	"uri": "/1-compute---amazon-ec2/",
	"title": "Compute - Amazon EC2",
	"tags": [],
	"description": "",
	"content": "\nBuilding and running your organization starts with compute, whether you are building enterprise, cloud-native or mobile apps, or running massive clusters to drive analysis workloads. AWS offers a comprehensive portfolio of compute services allowing you to develop, deploy, run, and scale your applications and workloads in the worldâ€™s most powerful, secure and innovative compute cloud.\nAWS computing services have the following characteristics:\nRight compute for your workloads Accelerate from idea to market Offer built in security Flexibility to optimize costs Provide compute resource where you need it "
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-1-create-a-new-key-pair/",
	"title": "Create a new Key Pair",
	"tags": [],
	"description": "",
	"content": " Create a new Key Pair In this lab, you will need to create an EC2 instance using an SSH keypair. The following steps outline creating a unique SSH keypair for you to use in this lab.\nNavigate to Amazon EC2 Console.In the upper-right corner of the AWS Management Console, confirm you are in the desired AWS region.\nClick on Key Pairs in the Network \u0026amp; Security section near the bottom of the leftmost menu. This will display a page to manage your SSH key pairs. Click Create Keypair to generate a new keypair Name: [Your Name]-ImmersionDay Select: .pem (For Windows users please select ppk for the file format.)\nThe page will download the file [Your Name]-ImmersionDay.pem to the local drive. Follow the browser instructions to save the file to the default download location. Remember the full path to the key pair file you just downloaded.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-1-create-a-new-key-pair/",
	"title": "Create a new Key Pair",
	"tags": [],
	"description": "",
	"content": " Create a new Key Pair In this lab, you will need to create an EC2 instance using an SSH keypair. The following steps outline creating a unique SSH keypair for you to use in this lab.\nNavigate to Amazon EC2 Console.In the upper-right corner of the AWS Management Console, confirm you are in the desired AWS region.\nClick on Key Pairs in the Network \u0026amp; Security section near the bottom of the leftmost menu. This will display a page to manage your SSH key pairs. Click Create Keypair to generate a new keypair Name: [Your Name]-ImmersionDay Select: .pem (For Windows users please select ppk for the file format.)\nThe page will download the file [Your Name]-ImmersionDay.pem to the local drive. Follow the browser instructions to save the file to the default download location. Remember the full path to the key pair file you just downloaded.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/",
	"title": "EC2 Auto Scaling",
	"tags": [],
	"description": "",
	"content": " EC2 Auto Scaling Lab Overview An overview of auto-scaling on AWS can be found here. This lab will first walk you through the process of creating an Amazon Machine Image (AMI) from a web host created with CloudFormation. Then it will walk you through creating a launch template and setting up the web host within an auto scaling group behind an Appliction Load Balancer (ALB). The end result will be an auto scaling group behind a load balancer that scales based on CPU utilization of the hosts.\nServices and concepts covered in this lab: Primary: Auto Scaling, Launch Templates, Creation and configuration of Security Groups Secondary: AMIs, Application Load Balancers This lab will walk you through the following Lab prerequisites Create a Launch template Set up Auto Scaling group Configuring security groups Testing the Auto Scaling Group Auto Scaling Lab Teardown Lab Text Legend \u0026ldquo;Quoted Text with a gray highlight\u0026rdquo; - References a heading, title or name in the console. Bold Text - Represents a button, link or dropdown that you will need to click on or select. Inline code- Text you need to copy for input. (Longer text will have a copy button, shorter text will just be highlighted) Inline code [with brackets]- The text in brackets represents text that requires a unique input. The required input will be called out in the brackets. On to the next step: Lab prerequisites\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/",
	"title": "EC2 Linux Hands on Lab",
	"tags": [],
	"description": "",
	"content": " Amazon EC2 Overview Amazon EC2 provides scalable computing capacity in the Amazon Web Services (AWS) Cloud. Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. Amazon EC2 enables you to scale up or down to handle changes in requirements or spikes in popularity, reducing your need to forecast traffic.\nCreate your own web server by going through the labs in the order below:\nCreate a new keypair Launch a web server instance Connect to your linux instance Connect to your Linux instance using Session Manager (Optional) Connect to EC2 Instance using PuTTy (Optional) "
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/",
	"title": "IAM Hands on Lab",
	"tags": [],
	"description": "",
	"content": " Identity \u0026amp; Access Management (IAM) Overview AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources.\nWhen you first create an AWS account, you begin with a single sign-in identity that has complete access to all AWS services and resources in the account. This identity is called the AWS account root user and is accessed by signing in with the email address and password that you used to create the account.\nAWS IAM key components:\nIAM Identities IAM Users IAM User groups IAM Roles IAM Policy This hands on lab is broken into the following parts:\nLaunch EC2 Instances with Tags Create AWS IAM Identities Test the access for resources Assign IAM Role for EC2 Instance and Test the access "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-1-lab-prerequisites/",
	"title": "Lab prerequisites",
	"tags": [],
	"description": "",
	"content": " Download and launch the CloudFormation template Download the CloudFormation template \u0026ldquo;EC2-Auto-Scaling-Lab.yaml\u0026rdquo; by right-clicking on this link and save it to your local hard drive.\nIn the AWS Console, search for CloudFormation or select the Services menu and click CloudFormation under \u0026ldquo;Management \u0026amp; Administration\u0026rdquo;. In the CloudFormation console, select the Create Stack button. Under \u0026ldquo;Sample Source\u0026rdquo;, select Upload Template File and then select the Choose file button. Select the sample file \u0026ldquo;EC2-Auto-Scaling-Lab.yaml\u0026rdquo; that you downloaded in the first step. Then click the Next. button. On the Specify Stack Details page, fill in the following fields:\na. Under \u0026ldquo;Stack Name\u0026rdquo;, name your stack [Your Initials]-EC2-Web-Host.\nb. You can leave \u0026ldquo;AmiID\u0026rdquo; as default, resulting in using the latest version of this AMI.\nc. Under \u0026ldquo;InstanceType\u0026rdquo; , select m5.large or t2.micro. We recommend using m5.large sized instances to demonstrate actual performance because t2 type instances are not recommended for production workloads. If you have problems with m5 instances for any reason, reload the Cloudformation template and select t2.micro, it should suffice for this lab.\nd. In \u0026ldquo;MyIP\u0026rdquo; , input the IP address of your local machine, then the file /32. This will lock HTTP port 80 to your machine. You can find your local IP by searching what is my IP.\ne. Under \u0026ldquo;MyVPC\u0026rdquo; , select the VPC you want to use for instance setup. In most accounts, the default VPC will be a good choice, and in new AWS accounts it will be the only choice.\nf. Under \u0026ldquo;Public Subnet\u0026rdquo;, select a subnet in your VPC that has internet access. A public subnet is defined by a subnet that has a route to the internet gateway in its routing table. By default, all default VPC subnets are public. Once you have finished entering the details above, click Next . On the next page, \u0026ldquo;Configuring Stack Options\u0026rdquo;, you can leave \u0026ldquo;Tags\u0026rdquo;, \u0026ldquo;Permissions\u0026rdquo; and \u0026ldquo;Advanced Options\u0026rdquo; as default and select Next .\nOn the Review [Your Initials]-EC2-Web Host page, review your settings and click Create Stack.\nWait until \u0026ldquo;Logical ID\u0026rdquo; \u0026ldquo;[Your Initials]-EC2-Web Host\u0026rdquo; shows the status \u0026ldquo;CREATE_COMPLETE\u0026rdquo;. Confirm the successful setup of your instance: Navigate to Amazon EC2 Select Session on the \u0026ldquo;Instances\u0026rdquo; page, select the \u0026ldquo;[Your Initials]-S3-Web-Host\u0026rdquo; instance and copy the \u0026ldquo;Public IPv4 DNS\u0026rdquo; address to your clipboard . Paste this address into a new tab on your web browser. You should now see the word page titled \u0026ldquo;Version metadata Create a custom AMI of a web server created in EC2 - Linux Lab: Now that we\u0026rsquo;ve set up the instance to host our site, we\u0026rsquo;ll create a custom machine image for our auto-scaling team. This will create an image of our web server that will be used by our Auto Scaling team to generate multiple instances based on the server load.\nIn the EC2 Console in Instances, you can create Amazon Machine Images (AMIs) from running or stopped instances.\nRight click on your web hosting instance named \u0026ldquo;[Your Initials] - Web Server\u0026rdquo; and under \u0026ldquo;Images and Templates\u0026rdquo; select Create Image from the context menu . (This can also be done by selecting the instance and clicking the Actions menu in the upper right corner) On the \u0026ldquo;Create Image\u0026rdquo; page, enter the Image name [Your Initials]_Auto_Scaling_Webhost and a description. You can leave the Instance volume as default and then select Create Image. It may take a few minutes to create an AMI. In the EC2 console under \u0026ldquo;Images\u0026rdquo; in the left menu, select AMI. You will see the AMI you just created, it may be pending, but after a while it will become available. Now that we\u0026rsquo;re done with the new Amazon Machine Image, we can now move on to setting up our auto-scaling security group.\nCreate a new Security Group for our Auto Scaling Group: Before we start setting up the Launch Template, we\u0026rsquo;ll need to set up a Special Security Group for our Auto Extension Group. A security group that provides instance-level (virtual machine) protection. If you want to know more about security groups, see this page.](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html)\nIn the control panel, under \u0026ldquo;Services\u0026rdquo;, select EC2 or search for EC2 in the search bar. On the EC2 site under the heading \u0026ldquo;Network \u0026amp; Security\u0026rdquo; in the left menu, select Security Groups. You\u0026rsquo;ll see other security groups, including a security group for your web server named [Your Initials]-EC2-WEb-Host - Website Security Group. To start creating a new security group, click the Create Security Group button Name your security group [Your Initials] - Auto Scaling SG and make sure you have selected the correct VPC.\nIn \u0026ldquo;Inbound Rules\u0026rdquo; currently there aren\u0026rsquo;t any rules created, we will leave it blank for now. We\u0026rsquo;ll create a rule later in this lab, but we need a load-balanced security group to exist first.\n\u0026ldquo;Outbound rules\u0026rdquo; currently allow all traffic out so there is no need for any additional rules. Now click Create Security Group. You are now finished with the prerequisites and ready to move onto the next step: Creating a Launch Template\n"
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/3-1-1-launchec2instanceswithtags/",
	"title": "Launch EC2 Instances with Tags",
	"tags": [],
	"description": "",
	"content": " Launch EC2 Instances with Tags In this lab, we will launch two Amazon Linux 2 instances. Suppose one is an EC2 instance used in a development environment and the other one used in a production environment. We will use tags to distinguish these two instances. Enter into EC2 Console in AWS Management Console.\nClick on EC2 Dashboard near the top of the leftmost menu. And Click on Launch instances.\nIn Name, enter the value prod-instance. And click on Add additional tags. Click Add tag then in Key enter Env, and Value enter prod. Check the default settings for Amazon Machine Image and select t2.micro in Instance Type. In Key pair (login) select Proceed without a key pair. Then click Launch instance. You have launched an EC2 instance for production environment. Now you have to create one more EC2 instance for development environment.\nKEY VALUE Name dev-instance Env dev After you launched two instances, you can find them in the instances menu in the sidebar. Click the prod-instance checkbox and click the Tags tab in the bottom of the page. You can see details about this EC2 instance\u0026rsquo;s tag information. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-1-pre-requisite/",
	"title": "Pre-Requisites and Lambda Deployment",
	"tags": [],
	"description": "",
	"content": " In order to complete this immersion day lab, you will need the following:\nAWS CLI - Follow the AWS CLI Getting Started guide to install and configure the CLI on your machine. CostCalculator and MedianPriceCalculator Lambda functions Postman - https://www.postman.com/downloads/ The code and instructions in this workshop assume only one person is using a given AWS account at a time and that all resources are in us-east-1 region.\nDeploy Lambda Functions Download the Serverless Application Model (SAM) template package-template.yaml\nRun the following command to configure your AWS CLI\n$ aws configure\rAWS Access Key ID [None]: \u0026lt;Enter Access Key ID\u0026gt;\rAWS Secret Access Key [None]: \u0026lt;Enter Secret key\u0026gt;\rDefault region name [None]: us-east-1\rDefault output format [None]: json Run the following command to deploy the lambda functions The above command deploys two lambda functions. Below is a description of each function and the applicable lab sections.\nFunction Name Description Lab Usage CostCalculator Lambda function that calculates the price per unit and the total cost of a house.Price per unit = price/sizeTotal cost = downpaymentAmount + price Main Sections MedianPriceCalculator Lambda function that returns the median price of a house in US ($320,000) and Canada ($240,000). Optional Sections Go to the Lambda console at https://console.aws.amazon.com/lambda Verify that serverless-immersion-day-api-CalculateCostPerUnit-XX and serverless-immersion-day-api-MedianPriceCalculator-XX are listed. "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/",
	"title": "VPC Hands on Lab",
	"tags": [],
	"description": "",
	"content": " Amazon VPC(Virtual Private Cloud) Overview Amazon Virtual Private Cloud(Amazon VPC) enables you to launch AWS resources into a virtual network that youâ€™ve defined. This virtual network closely resembles a traditional network that youâ€™d operate in your own data center, with the benefits of using the scalable infrastructure of AWS.\nAmazon VPC lets you provision a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways. You can use both IPv4 and IPv6 in your VPC for secure and easy access to resources and applications. Configure your own network by going through the labs in the order below:\nCreate a VPC Create additional subnets Edit the routing table Create a Security Group VPC Flow Logs (Optional) Clean up resources "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/",
	"title": "Amazon API Gateway Hands on Lab",
	"tags": [],
	"description": "",
	"content": " Amazon API Gateway Overview Cá»•ng API Amazon is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. APIs act as the \u0026ldquo;front door\u0026rdquo; for applications to access data, business logic, or functionality from your backend services. Using API Gateway, you can create RESTful APIs, HTTP APIs, or WebSocket APIs (which enable real-time two-way communication applications). API Gateway supports containerized and serverless workloads, as well as web applications.\nAPI Gateway handles all the tasks involved in accepting and processing up to hundreds of thousands of concurrent API calls, including traffic management, CORS support, authorization and access control, throttling, monitoring, and API version management. API Gateway has no minimum fees or startup costs. You pay for the API calls you receive and the amount of data transferred out and, with the API Gateway tiered pricing model, you can reduce your cost as your API usage scales. In the main lab sections, you will create an API that invokes a lambda function to calculate the price of a house (price per square foot). In the first part of the lab, you will deploy a pre-defined sample lambda function and create the back-end API. You will test your APIs using both the API Gateway console and Postman.\nIn the optional lab sections, you will learn how to cache service responses, throttle requests, and create various usage plans.\nThe overall architecture for the lab is depicted above.\nConfigure your own API Gateway by going through the labs in the order below:\nPre-Requisites and Lambda Deployment Create Your First API Message Transformation Request Validation Authentication and Authorization API Deployment Message Caching (Optional) Usage Plans and Message Throttling (Optional) Clean Up Resources "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-1-create-a-vpc/",
	"title": "Create a VPC",
	"tags": [],
	"description": "",
	"content": " Create a VPC Login to VPC Console .\nClick Launch VPC Wizard. The Launch VPC wizard makes it easy to create a non-default VPC configuration. In VPC Settings, select VPC, Subnet, etc. . enter the name VPC-Lab . Set the CIDR block to the default value 10.0.0.0/16 . Select 1 Availability Zone (AZ) and select ap-northeast-2a . Availability zones are a subset of the VPCs that you set up earlier. Choose a public subnet number of 1 and set the CIDR block to 10.0.10.0/24 . You do not create a private subnet for this section, so choose 0. Then click the Create VPC button at the bottom. After you create the VPC, you can see a VPC named VPC-Lab-vpc . Rename to VPC-Lab Go to Subnet tap and change the subnet name to public subnet A Architecture, as of now, is below. Understanding CIDR address ranges CIDR (Classless Inter-Domain Routing) is one of the ways to represent the address and size of a network. The VPC you created above uses a range of IP addresses with 16 as the subnet value. The number of IPs that can be allocated to each resource is 65,536, which is 2 to the 16th power. When specifying VPC CIDR blocks, the allowed block size is /16 netmask (65,536 usable IP addresses) ~/28netmask (16 usable IP addresses). In each CIDR subnet block, the first 4 IP addresses and the last IP addresses are not available to users and cannot be assigned to instances. For example, in the subnet of the 10.0.0.0/24 CIDR block, the following 5 IP addresses are reserved.\nKey Value 10.0.0.0 Network Address 10.0.0.1 Reserved for VPC routers from AWS 10.0.0.2 DNS Server Address 10.0.0.3 Reserved for future use from AWS 10.0.0.255 Network broadcast address "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-2-creating-additional-subnets/",
	"title": "Create additional subnets",
	"tags": [],
	"description": "",
	"content": " Create additional subnets To maintain high availability, it is important to deploy services across multiple Availability Zones. So, in this lab, you will create a subnet in an Availability Zone C, which is different from the Availability Zone A, where the subnet created earlier is located.\nClick the Subnet menu on the left sidebar, then click the Create Subnet button. For VPC ID, select the VPC you just created. In the Subnet settings section enter the values as shown on the screen and click the Create Subnet button. Key value subnet name public subnet C Availability Zone ap-northeast-2c IPv4 CIDR Block 10.0.20.0/24 Name public subnet C You can see that both public subnet A and public subnet C have been created. Architecture so far is as below. "
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/3-1-2-createawsiami-dentities/",
	"title": "Create AWS IAM Identities",
	"tags": [],
	"description": "",
	"content": " Log in to IAM console . To generate a console login Sign-in URL, click the customize button as shown below. Input account alias. For this lab, type aws-login-user_name and click create alias button. Click Policies on the left side of the IAM console, and then click the Create Policy button placed at the top of the right corner. When defining policy for the AWS permissions, you can create and edit in visual editor or JSON. In this lab, we will use JSON method. Briefly describe the permission below, this policy allows all actions for EC2 tagged as Env-dev. Also, it allows describe-related actions for all EC2 instances. But it denies create and delete tags action to prevent users from modifying tags arbitrarily. Note that deny effect takes precedence over allow effect. {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Condition\u0026#34;: {\r\u0026#34;StringEquals\u0026#34;: {\r\u0026#34;ec2:ResourceTag/Env\u0026#34;: \u0026#34;dev\u0026#34;\r}\r}\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:Describe*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:DeleteTags\u0026#34;,\r\u0026#34;ec2:CreateTags\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} Click the JSON tab and paste the above policy and click Next: Tags button. Keep default settings on next step, click Next: Review button. Write down DevPolicy in the name section, and write down description for this policy. Next click the Create policy button. KEY VALUE Name DevPolicy Description IAM Policy for Dev Group Click User groups on the left side of the IAM console, and then click the Create group button placed at the top of the right corner. Type dev-group for User group name and select DevPolicy in Attach permissions policies - Optional section. Click Users on the left side of the page, and then click the Add users button. Type dev-user on User name and allow two access type both Programmatic access and AWS Management console access. And then, select Custom password and type password that you want. Finally, uncheck Require password reset function for quick action. In real world, it is recommended to activate the password reset. Click Next: Permissions button. Select dev-group that we created right before and click Next: Tags button. Skip Add user page and move on to next step. Click Create user button for adding dev-user. Download csv file to attain Access key ID and Secret access key. Also, you can send instructions for login.\nClick Sign-in URL to log in as dev-user. Type IAM user name and Password for log in and sign in for entering into AWS management console. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-2-create-your-first-api/",
	"title": "Create Your First API",
	"tags": [],
	"description": "",
	"content": " Sign in to the AWS Management Console and open the Amzon API Gateway console.\nIf this is your first API, you will see the Amazon API Gateway welcome page. Click Build in the REST API. Click Ok on the popup If not, click API and then click Create API . Click Build in the REST API. In Create New API Select New API\nIn Settings , Enter the following values:\nAPI name: calculatePrice Description: Calculates the price of a house per square meters Endpoint type: Regional Click Create API\nIn the Actions section, select Create Resource Enter the following values:\nResource name: pricePerMeter Click Create Resource\nSelect Action , select Create Method\nSelect Post and Click the check icon to confirm. In the Post method, Select the following values:\nIntegration Type: Lambda Function Lambda region:us-east-1 Lambda function: (Select the function that appears.)serverless-immersion-day-stac-CalculateCostPerUnit- Click Save .\nIn the dialog, Add Permissions to Lambda Function, Click OK.\nYou have now configured your API to call the costCalculator lambda function. The API Gateway pane shows the stream of request and response data. 14. Click the Test icon to provide a sample request message. 15. Copy and Paste the following JSON Form into the Request Body\n{\r\u0026#34;price\u0026#34;: \u0026#34;400000\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;1600\u0026#34;,\r\u0026#34;unit\u0026#34;: \u0026#34;sqFt\u0026#34;,\r\u0026#34;downPayment\u0026#34;: \u0026#34;20\u0026#34;\r} Click Test Please note the Response Body has a status code of 200 . The body of the response contains the price per unit and the total cost. The header of the response along with the message body is generated by the lambda function. The test page also shows the complete request/response log. Note that the lambda service returned the total cost, but not the upfront payment. In the next section, we will convert the message to pass the upfront amount to the lambda function.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-2-creating-a-launch-template/",
	"title": "Creating a Launch Template",
	"tags": [],
	"description": "",
	"content": " Automated Scaling Lab Architecture: Below is a diagram of our end state architecture. Please build! There are three main components to EC2 Auto Scaling on AWS Launch Template: A Launch Template is a feature of EC2 Auto Scaling that allows a way to templatize your launch requests. It enables you to store launch parameters so that you do not have to specify them every time you launch an instance. For example, a launch template can contain a specific Amazon Machine Image, instance type, storage, and networking settings that you typically use to launch instances. For each Launch Template, you can create one or more numbered Launch Template Versions. Each version can have different launch parameters.\n2. Auto Scaling Groups: For auto scaling your EC2 instances are organized into groups so that they can be treated as a logical unit for the purposes of scaling and management. When you create a group, you can specify its minimum, maximum, and desired number of EC2 instances.\nScaling Policies: A Scaling Policy tells Auto Scaling when and how to scale. Scaling can occur manually, on a schedule, on demand, or you can use Auto Scaling to maintain a specific number of instances.\nAuto Scaling is well suited for applications that have unpredictable demand patterns that can experience hourly, daily, or weekly variability in usage. This helps you to manage your cost and eliminate over-provisioning of capacity during times when it is not needed. Auto Scaling can also find an unhealthy instance, terminate that instance, and launch a new one based on the scaling plan.\nThe number of EC2 instances can be scaled in or out as Auto Scaling responds to the metrics you define when creating these groups.\nYou can specify the minimum number of instances in each Auto Scaling Group, so that your group never goes below this size. (Even if the instances are determined to be unhealthy) You can specify the maximum number of instances in each Auto Scaling Group, so that your group never goes above this size. You can specify a desired capacity to specify the number of healthy instances your auto scaling group should have at all times. (More information can be found here) You can specify scaling policies so that Auto Scaling will modify the desired target capacity mentioned in the previous point. It will launch or terminate instances as demand on your application increases or decreases. Create a launch template When you create an Auto Scaling Group, you must specify a Launch Template. The first step in this lab is to create a Launch Template for an EC2 Auto Scaling Pool.\nNavigate to Amazon EC2\nFind \u0026ldquo;Instance\u0026rdquo; and select Launch Template. Create a launch template. Start with \u0026ldquo;Launch Template Name and Description\u0026rdquo;:\nLaunch Template Name: [Your Initials]-scaling-template Sample version description: This is optional Auto Scaling Instructions : Check the box to provide instructions \u0026ldquo;Launch Sample Content\u0026rdquo; defines the parameters for instances in the Auto Scaling group: Amazon Machine Image (AMI) : Select \u0026ldquo;My AMI\u0026rdquo; and \u0026ldquo;Owned by Me\u0026rdquo;. In the search drop down by entering your initials and select the custom AMI you just created [Your initials]_Auto_Scaling_WebHost . (The new AMI you just created may already be selected) Instance type: t2.micro Key Pair (Login) : Select the Key Pair you generated in the first lab, most likely it\u0026rsquo;s [Your initials]-KeyPair Network settings : Subnet: Not included in the launch template Firewall (security groups): Select \u0026ldquo;Select an existing security group\u0026rdquo; and then select the security group you created in the first part of this lab called [Abbreviated name of you] - Auto Scaling SG Configure Storage : Leave Default Resource tags : None Advanced Details : IMPORTANT : Select the arrow to expand \u0026ldquo;Advanced Details\u0026rdquo; and under \u0026ldquo;Detailed Cloudwatch Monitoring\u0026rdquo; select Enable. Leave everything else as default. When you are sure that the configurations are correct, click Create Launch Template, then click View Launch Template. You are now done creating your Launch Template. "
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/",
	"title": "EC2 Windows Hands on Lab",
	"tags": [],
	"description": "",
	"content": " Amazon EC2 Overview Amazon EC2 provides scalable computing capacity in the Amazon Web Services (AWS) Cloud. Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. Amazon EC2 enables you to scale up or down to handle changes in requirements or spikes in popularity, reducing your need to forecast traffic. Create your own web server by going through the labs in the order below:\nCreate a new keypair Launch a web server instance Connect to your linux instance Connect to your Linux instance using Session Manager (Optional) Connect to EC2 Instance using PuTTy (Optional) "
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-2-launch-a-web-server-instance/",
	"title": "Launch a Web Server Instance",
	"tags": [],
	"description": "",
	"content": " Launch a Web Server Instance We will launch an Amazon Linux 2 instance, bootstrap Apache/PHP, and install a basic web page that will display information about our instance.\nClick onÂ Dashboard EC2 and click Launch instance.\nIn Name, set the value Web Server for IMD. And check out the default settings for Amazon Machine Image below. Select t2.micro in Instance Type.\nSelect the key pair that you created in the create new key pair section. Enter the Edit button in the Network Settings to set the space where EC2 will be located. Check VPC and subnet default. Automatically assign public IP set to On . Just below it, create Security groups to act as a network firewall. Security groups will specify the protocols and addresses you want to allow in your firewall policy. For the security group you are currently creating, this is the EC2 rule that will be created. After entering Immersion Day - Web Server in Security group name and Description, select Add Security group rule and set HTTP to Type. Also enable TCP/80 for Web Services by specifying it.Select My IP in the source. All other values â€‹â€‹accept default values, expand by clicking on tab Advanced Details at the bottom of the screen. Enter the following values â€‹â€‹in the Data users field and select Launch Session instance. #!/bin/sh\r# Install a LAMP stack\ramazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\ryum -y install httpd php-mbstring\r# Start the web server\rchkconfig httpd on\rsystemctl start httpd\r# Install the web pages for our lab\rif [ ! -f /var/www/html/immersion-day-app-php7.tar.gz ]; then\rcd /var/www/html\rwget https://aws-joozero.s3.ap-northeast-2.amazonaws.com/immersion-day-app-php7.tar.gz tar xvfz immersion-day-app-php7.tar.gz\rfi\r# Install the AWS SDK for PHP\rif [ ! -f /var/www/html/aws.zip ]; then\rcd /var/www/html\rmkdir vendor\rcd vendor\rwget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip\runzip aws.zip\rfi\r# Update existing packages\ryum -y update Click the View instances button in the lower right part of the screen to see a list of EC2 instances. Once your instance has launched, you will see your Web Server as well as the Availability Zone in which the instance is located and DNS name publicly routable. Click the checkbox next to your web server to view detailed information about this EC2 instance. Browse the web servers Wait for the version to pass the Status Check to finish loading. Open a new browser tab and browse the Web Server by entering the public DNS name of the EC2 instance into the browser. You can find your EC2 instance\u0026rsquo;s public DNS name in the console by reviewing the line Public IPv4 DNS marked above. You will see a web page that looks like the following. Great Job! You have deployed a server and launched a web site in a matter of minutes! "
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-2-launch-a-web-server-instance/",
	"title": "Launch a Web Server Instance",
	"tags": [],
	"description": "",
	"content": " Launch a Web Server Instance Click onÂ Dashboard EC2and click Launch instance.\nIn Name , set the value \u0026quot;[Your initials] Windows Web Server\u0026quot;. And check out the default settings for Amazon Machine Image below. Select t2.micro in Type Version.\nSelect the keyword pair you created in the create new keyword pair section. In the Network Settings section, configure the security group to Allow RDP and HTTP from the internet. Note: EC2 instances will be mined in the default VPC and default subnet in any availability zones. This instance will also be automatically assigned a public IP address. To change any of these settings, you can click the \u0026ldquo;Edit Only\u0026rdquo; button Expand the Advanced Details tab at the bottom of the screen and enter the following values â€‹â€‹in the User Data Field. Faced with all the different choices, accept the defaults. If you want to learn more about the options in Advanced details, select Info next to it. User Data \u0026lt;powershell\u0026gt;\rImport-Module ServerManager;\rInstall-WindowsFeature Web-Server -IncludeManagementTools -IncludeAllSubFeature\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment\rEnable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-Security\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-Performance\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic\rEnable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45\rremove-item -recurse c:\\inetpub\\wwwroot\\*\r(New-Object System.Net.WebClient).DownloadFile(\u0026#34;https://static.us-east-1.prod.workshops.aws/public/b2083843-9bc2-4f94-bf8e-c4f6238d04f4//static/common/ec2_web_hosting/ec2-windows.zip\u0026#34;, \u0026#34;c:\\inetpub\\wwwroot\\ec2-windows.zip\u0026#34;)\r$shell = new-object -com shell.application\r$zip = $shell.NameSpace(\u0026#34;c:\\inetpub\\wwwroot\\ec2-windows.zip\u0026#34;)\rforeach($item in $zip.items())\r{\r$shell.Namespace(\u0026#34;c:\\inetpub\\wwwroot\\\u0026#34;).copyhere($item)\r}\r\u0026lt;/powershell\u0026gt; Verify your selections are correct then select Launch instance Click the View instances button in the lower right part of the screen to see a list of EC2 instances. Once your instance has started, you will see your Web Server as well as the Availability Zone in which the instance is located and DNS name can be publicly routed. Check the checkbox next to your web server to see details about this EC2 instance. Open a new browser tab and browse the Web Server by entering the DNS IPv4 Plus name of the EC2 instance into the browser. You can find your EC2 instance\u0026rsquo;s public DNS name in the console by reviewing the line of public IPv4 DNS names highlighted above. You will see a web page that looks like the following "
},
{
	"uri": "/2-network---amazon-vpc/",
	"title": "Network - Amazon VPC",
	"tags": [],
	"description": "",
	"content": " AWS provides the broadest and deepest set of networking services with the highest reliability, most security features, and highest performance in the world. This helps ensure you can run any kind of workload you have in the cloud.\nAWS Networking services have the following characteristics:\nMore secure Highest network availability Consistent high performance Broadest global coverage "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/",
	"title": "Auto Scaling on AWS",
	"tags": [],
	"description": "",
	"content": " AWS Auto Scaling monitors your applications and automatically adjusts capacity to maintain steady, predictable performance at the lowest possible cost. Using AWS Auto Scaling, itâ€™s easy to setup application scaling for multiple resources across multiple services in minutes. The service provides a simple, powerful user interface that lets you build scaling plans for resources including Amazon EC2 instances and Spot Fleets, Amazon ECS tasks, Amazon DynamoDB tables and indexes, and Amazon Aurora Replicas.\nAWS Auto Scaling makes scaling simple with recommendations that allow you to optimize performance, costs, or balance between them. If youâ€™re already using Amazon EC2 Auto Scaling to dynamically scale your Amazon EC2 instances, you can now combine it with AWS Auto Scaling to scale additional resources for other AWS services. With AWS Auto Scaling, your applications always have the right resources at the right time.\nLet\u0026rsquo;s get started: EC2 Auto Scaling\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-3-connect-to-your-linux-instance-using-session-manager-optional/",
	"title": "Connect to your Linux instance using Session Manager (Optional)",
	"tags": [],
	"description": "",
	"content": " Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. You can use Session Manager to start a session with an instance in your account. After the session is started, you can run bash commands as you would through any other connection type.\nCreate an IAM instance profile for Systems Manager Navigate to the IAM console. In the navigation pane, select Roles and then select Create Role . In Select Trusted Entity Type , select AWS service . Just below Select the service that will use this role , select EC2 and then select Next. On the Attachment Permissions Policy page, do the following: Use the Search field to locate AmazonSSMManagedInstanceCore. Check the box next to its name. Select Next. Select Connect . A new session will be started in a new tab. After the session starts, you can run bash commands like you would through any other type of connection. Attach the Systems Manager instance profile to an existing instance (console) Navigate to Amazon EC2\nSelect the EC2 Instance list and click Actions.\nIn the Action menu, select Security, Modify IAM Role For the IAM role, select the created instance profile SSInstanceProfile. Select Save\nConnect to your Linux instance using Session Manager At the EC2 instance dashboard, select the instance you want to connect to, then click the Connect button. In the Connect to instance page, select Session Manager Review the Session Manager usage section for advantages of using Session Manager.\nChoose Connect. A new session will be started in a new tab. After the session is started, you can run bash commands as you would through any other connection type.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-3-connecting-to-your-windows-instance/",
	"title": "Connecting to your Windows Instance",
	"tags": [],
	"description": "",
	"content": " Connecting to your Windows Instance In this example, we will connect to the Windows desktop using the RDP client. If you\u0026rsquo;re using a Windows PC, use the included Remote Desktop app. For Mac users, if you don\u0026rsquo;t have the RDP client installed, download Microsoft Remote Desktop.\nClick on your instance and select Connect. Click the RDP client tab and then click Get Password to retrieve the encrypted Windows password. On the screen that appears click the Browse button and select the private key file that you downloaded earlier when generating the new key pair. Click Decrypt Password to get the Administrator password. The decrypted Administrator password will look like this and you can click the copy icon to copy it. Start your RDP application and connect to your instance\u0026rsquo;s hostname. The hostname can be found in a few different places. For example, the Connect to instance window from the previous step. You can also find it in the EC2 Console Instances page where you will see the hostname listed as Public IPv4 DNS in the Instance Summary. Once your RDP session is established, you should see a Windows desktop with a background like this. "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-3-edit-the-routing-table/",
	"title": "Edit the routing table",
	"tags": [],
	"description": "",
	"content": " Understanding VPC route table A route table contains a set of rules, called routes, that are used to determine where network traffic from your subnet or gateway is directed.\nMain route table automatically comes with your VPC. It controls routing for all subnets that are not explicitly linked to any other routing tables. Custom route table A route table that you create for your VPC. Edit routing table connection Click the Actions in the Subnet menu button and select Edit routing table association . Select a route table other than the main routing table from the routing table ID and save it. See if there is a route to the Internet in the selected routing table. After selecting public subnet C , view the routing information by clicking the changed routing table hyperlink in the Details tab. You can see from Route tab as below. We can therefore confirm that a route to the internet has also been created for the public subnet C. Destination Goal 10.0.0.0/16 local 0.0.0.0/0 igw-OOO Architecture, so far, as below. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-3-message-transformation/",
	"title": "Message Transformation",
	"tags": [],
	"description": "",
	"content": " Build a model In the box containing the name of the Pricing API, select Models. Click Create .\nEnter the following information:\nModel name: costCalculatorRequest Content-Type: application/json Model Description:CostCalculator incoming request schema Model Schema: Copy and Paste the following: {\r\u0026#34;$schema\u0026#34;: \u0026#34;http://json-schema.org/draft-04/schema#\u0026#34;,\r\u0026#34;title\u0026#34;: \u0026#34;costCalculatorRequestModel\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,\r\u0026#34;properties\u0026#34;: {\r\u0026#34;price\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; },\r\u0026#34;size\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; },\r\u0026#34;unit\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;},\r\u0026#34;downPayment\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34;}\r}\r} 4. Click Create Model .\nTransform Request Payload Go back to the Calculation API and click the POST action. From the Gateway pane, click Integration Request From the Integration Requirements pane, expand the Mapping Templates section Select When there are no templates defined (recommended) Click Add Mapping Template Enter for Content-Type. Select the check mark .application/json In the Create Template section, select the CostCalculatorRequest model Update the template as follows: #set($inputRoot = $input.path(\u0026#34;$\u0026#34;))\r{\r\u0026#34;price\u0026#34;: \u0026#34;$inputRoot.price\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;$inputRoot.size\u0026#34;,\r\u0026#34;unit\u0026#34;: \u0026#34;$inputRoot.unit\u0026#34;,\r\u0026#34;downPaymentAmount\u0026#34;: $inputRoot.downPayment\r} Click Save Transform Response Payload Go back to the Calculation API and click the POST action. From the API Gateway pane, select Integrated Response . Click Integrated Response . Expand Method response row 200 Expand the Mapping Patterns Click on the application/json content type Select Method Request Passthrough Click Save Test the API Go back to your Calculation API and click POST method to test your API. Click the Test icon to provide a sample request message. Copy and Paste the following JSON Form into the Request Body {\r\u0026#34;price\u0026#34;: \u0026#34;400000\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;1600\u0026#34;,\r\u0026#34;unit\u0026#34;: \u0026#34;sqFt\u0026#34;,\r\u0026#34;downPayment\u0026#34;: \u0026#34;20\u0026#34;\r} Click Test Note that the downPayment amount has been added to the price to calculate the totalCost output. The response also contains the title and context properties. "
},
{
	"uri": "/3-security---aws-iam/",
	"title": "Security - AWS IAM",
	"tags": [],
	"description": "",
	"content": " Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features.\nAWS allows you to automate manual security tasks so you can shift your focus to scaling and innovating your business. Plus, you pay only for the services that you use. All customers benefit from AWS being the only commercial cloud that has had its service offerings and associated supply chain vetted and accepted as secure enough for top-secret workloads.\nAdditional Resources IAM Introduction IAM Best Practices IAM Policies IAM Tutorials "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-3-setup-an-auto-scaling-group/",
	"title": "Set Up Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": " Create Auto Scaling Group You have created a Startup Template, which defines the parameters of the instance to be started. We will now create an Automatic Regulatory Change Pool so that you can define how many EC2 instances will be started and where to start them.\nMake sure you are on the EC2 Services page.\nFind \u0026ldquo;Auto Scaling\u0026rdquo; and select Auto Scaling Groups .\nClick Create an Auto Scaling group.\nGive the Auto Scaling group a name:[Your Initials]-Lab-AutoScaling-Group\nFrom the Launch Template drop down choose the launch template named [Your initials]-template you created in the previous section and select Next. Configure the settings page, configure as follows and select Next:\nNetwork:\nVPC: Select your VPC (most likely Default) Subnets: Select the subnets where you would like the auto scaling group to use when spinning up the hosts. (If you are using the default VPC, this will most likely be four subnets, as shown below) A best practice for your Auto Scaling Group would be to select only private subnets. The instances will be sitting behind a load balancer and will not need public IP addresses. For the sake of this lab, they could be either private or public subnets.\nSpecify load balancing and health checks: Load balancing : Attached to a new load balancer\nLoad balancer type: Application Load Balancer\nLoad balancer name: [[Your Initials]-Application-Load-Balancer\nLoad balancer scheme: Internet-facing\nNetwork Mapping: You should see all the Availability Zones and subnets you selected in the previous step. (If you had multiple subnets per AZ, this were it would let you choose between them)\nListeners and Routing : Keep the Port as 80 and select Create a target group from the \u0026ldquo;Default routing (forward to)\u0026rdquo; dropdown.\nNew target group name :[Your initials]-Target-Group\n- The target group is where your load balancer will look for instances to distribute traffic. We're setting our auto-scaling bucket to automatically enroll instances to this bucket, and it will also be linked to our load balancer.\rHealth Check \u0026amp; Additional Settings : Leave as default and select Next. Configure the bucket size and scaling policy below, then select Next.\nGroup Size : The settings below will keep our group size to one EC2 instance unless a scaling policy is triggered.\nDesired power:1\nMinimum capacity:1\nMaximum capacity:5\nScaling policies: Select Expansion Policy by Target\nMetric type: Average CPU usage\ntarget Value:25\nWe are going to set our target CPU utilization low to speed up the lab. 9. Add Notifications:\nYou can configure your Auto Scaling Group to send notifications to an endpoint that you choose, such as an email address. You can receive notifications whenever a specified event takes place, including the successful launch of an instance, failed instance launch, instance termination, and failed instance termination.\nFor now, you are going to skip this step, select Next.\nAdd tag: Add a tag and then select Next . Select the Add Tag button and configure the following:\nkey:Name\nValue:[Your initials] - Auto Scaling Group Review your settings and select Create Auto-Scaling Group. Now you have created Auto Scaling Group, target group and load balancer. You will soon see a new instance created by the Auto Scaling group in the EC2 console with the tag name \u0026ldquo;[Your initials] - Auto Scaling Group\u0026rdquo;. (You may need to refresh the screen to see the version)\nIf you select Load Balances under \u0026ldquo;Load Balancing\u0026rdquo; in the left hand menu, you will see your load balancer provisioning.\n"
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/3-1-3-testtheaccessresources/",
	"title": "Test the access for resources",
	"tags": [],
	"description": "",
	"content": " Log in AWS console and check IAM User and account alias. Also, check AWS region that launched EC2 instances are located. Move on to the EC2 console and click Instances menu. Select the instance named prod-instance and click Instance state button and Stop instance button. And click Stop button in the pop-up window. A warning sign appears that dev-user doesn\u0026rsquo;t have permissions to perform the stop EC2 instance operation. This is because the previous hands on lab only allowed dev-user to perform the stop action on the ec2 instances with the resource tag Env(key)-dev(value). Select the instance named dev-instance and click Instance state button and Stop instance button. And click Stop button in the pop-up window. After a few seconds, you can see the dev instance has been stopped. Tip - IAM Policy Simulator (Optional) Move to IAM Policy simulator. Select dev-group\nSelect DeleteTags and StopInstances actions to test. You can see both actions are denied but with different reasons. DeleteTags was denied because of 1 matching statements and StopInstances was Implicitly denied (no matching statements). Expand DeleteTags and click Show statement in DevPolicy (IAM Policy). It automatically highlights which statement exactly matched with your simulated action. Expand StopInstances. The action was denied because the simulation resource is \u0026ldquo;*\u0026rdquo;. Please note that dev-group can only stop EC2 instances having dev tags. Now we will test the policy after adding dev tag to validate the policy correctly.\n"
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/3-1-4-assigniamrole/",
	"title": "Assign IAM Role for EC2 Instance and Test the access",
	"tags": [],
	"description": "",
	"content": " To create S3 Bucket, enter into the S3 console . And then, click Create bucket button. For more detail information on Amazon S3, please refer to the Storage on AWS chapter. Enter a unique bucket name in the Bucket name field. In this lab, type iam-test-user_name. All bucket names in Amazon S3 have to be unique and cannot be duplicated. Click Create bucket button, leaving the remaining settings intact. Upload any file(sample: aws-logo-picture ) in the S3 bucket. Create one more bucket named iam-test-other-user_name. Upload any file in the S3 bucket.\nMove on to the IAM console to create IAM role for EC2 instance. Click Roles on the left side of the IAM console and click Create role button. On first step, choose EC2 for trusted entity and click Next: Permissions. IAM Role can be applied to many AWS services including EC2 and Lambda, as well as other AWS accounts, Web identity, and SAML 2.0 federation. In step 2, click Create policy to create a policy to attach to the EC2 instance\u0026rsquo;s role. On the JSON tab, paste the policy below and click Next: Tags.\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Action\u0026#34;: [\u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;s3:GetBucketLocation\u0026#34;],\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Resource\u0026#34;: [\u0026#34;arn:aws:s3:::*\u0026#34;]\r},\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:Get*\u0026#34;,\r\u0026#34;s3:List*\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: [\r\u0026#34;arn:aws:s3:::iam-test-user_name/*\u0026#34;,\r\u0026#34;arn:aws:s3:::iam-test-user_name\u0026#34;\r]\r}\r]\r} To skip adding tags operation, click Next:Review and type IAMBucketTestPolicy in the Name input box. Click Create policy to attach to IAM role. Back to the page where you were creating IAM Role, press the refresh button on the right corner and type IAMBucketTestPolicy. If you see the policy you just created in the list below, select it and go to the next step.\nstep 4, type IAMBucketTestRole and create role. Move on to the EC2 console to attach IAM role on the EC2 instance. At this time, if you don\u0026rsquo;t have EC2 instances created in the previous lab, check the top right to see whether AWS Region is properly set up. Select prod-instance, then click the Connect button. Connect to instance by using EC2 Instance Connect option, and click Connect button. Then the terminal will come out as below. Type aws s3 ls and you cannot get S3 bucket lists. Back to the Instances page and select prod-instance. Click Actions button and select Security and click Modify IAM role.\nIn IAM role, select IAMBucketTestRole and click Save button to attach IAM role to EC2 instance.\naws s3 ls\raws s3 ls iam-test-user_name\raws s3 ls iam-test-other-user_name Again, connect to the EC2 instance and type aws s3 ls again. Now you can see S3 bucket lists. Also, you can see object list placed in iam-test-user_name but not in iam-test-other-user_name because you don\u0026rsquo;t have IAM policy for this bucket.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-4-change-ec2-instance-type-optional/",
	"title": "Change EC2 Instance Type (Optional)",
	"tags": [],
	"description": "",
	"content": " Change EC2 Instance Type (Optional) Did you know that you can change the instance type that an AMI is running on? This is very useful when you need a larger (or smaller) or perhaps different type of instance to run a workload. This only works with EBS-backed instances (what weâ€™re running here). There is no particular reason to change the instance type in this lab but the following steps outline how easy it is to do in AWS.\nNavigate to Amazon EC2, select your lab instance, right click on it and click Stop Instance (DO NOT terminate instance). Stop version Select Stop to confirm. Stop Confirming Once the instance has stopped, right-click it again, hover over Settings instance and select Change instance type. Select the instance type t3.large from the Change instance type window and then click Apply. Select the instance then right click it and click Start instance. "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-4-configuring-security-groups/",
	"title": "Configuring Security Groups",
	"tags": [],
	"description": "",
	"content": " Create a load balancer security group When our load balancer was provisioned, it was set up with the default security group in our VPC. To allow access to the load balancer through the public DNS, we will need to create and attach a security group to allow traffic to port 80 from the internet.\nWe will also create an outbound rule that will allow outgoing traffic from the load balancer to only be sent to servers in the Auto-Scale Security Group.\nIn the console Search for \u0026ldquo;Services\u0026rdquo; and select EC2 . On the EC2 site under the heading \u0026ldquo;Network \u0026amp; Security\u0026rdquo; in the left menu, select Security Group . You\u0026rsquo;ll see other security groups, including a security group for your web server named [Your Initials]-EC2-Web-Host - Site Security Group. Click the Create Security Group button.\nBasic details: Security group name :[Your Initials]-SG-Load-Balancer\nDescription :[Your Initials]-SG-Load-Balancer\nVPC : Choose your VPC (Most likely default VPC)\nInternal rules: Click the Add Rule button\nType :HTTP\nSource: Custom: [Input your private IP address followed by a /32](You can find your local IP by searching [What is my IP](https:// www.google.com/search?q=What+is+my+ip%3F\u0026rlz) )\nOutbound rules: Find the \u0026ldquo;All Traffic\u0026rdquo; rule and click Delete to remove the rule. (All outgoing rules will now be deleted)\nClick the Add Rule button\nType: HTTP\nUnder \u0026ldquo;Destination\u0026rdquo;, select Custom and in the field select [Your initials]-Auto scale SG as \u0026ldquo;Destination\u0026rdquo;. Hint: start by typing sg to get a list of Security Groups.\nYou security group configuration should look like the image below. Select Create security group when done. Attach your new Load Balancer Security group to your Load Balancer: On the left menu of the EC2 services page, find \u0026ldquo;Load Balancer\u0026rdquo; and select Load Balancer . Select the load balancer you created. Make sure the Status is \u0026ldquo;Active\u0026rdquo;.\nIn the \u0026ldquo;Description\u0026rdquo; tab, scroll down to the \u0026ldquo;Security\u0026rdquo; section and click Edit security group .\nCheck the box to the left of your new load balancer sg named [Your Initials]-SG-Load-Balancer.\nMake sure you also un-select any other security groups and then click the Save button. ![](/images/1-Compute-AmazonEC2/1-3-AutoScalingonAWS/1-3-1-EC2AutoScaling/1-3-1-4-ConfiguringSecurityGroups/ConfiguringSecurityGroupsâ€“8 .png?featherlight=false\u0026amp;width=90pc)\nTask 4: Add inbound rule to auto-scaling security group We will need to set up a rule to only allow traffic from the new Load Balancing Security Group to the Auto Scaling Security Group. This will be one of the layers of protection that prevents our web server from being accessed directly from the internet. On the left menu of the EC2 services page under \u0026ldquo;Network \u0026amp; Security\u0026rdquo;, select Security Groups.\nSelect your Auto Scaling Security Group: [Your initials] - Auto Scaling SG\nSelect the Inbound Rules tab and click the Edit Inbound Rules button and then click the Add Rule button.\nFrom the \u0026ldquo;Type\u0026rdquo; drop-down select HTTP. Under \u0026ldquo;Source\u0026rdquo;, select Custom and in the field specify your [Your Initials]-SG-Load-Balancer as the \u0026ldquo;Source\u0026rdquo;. Hint: start by typing sg to get a list of Security Groups. Now click **Save Rule.**\nYour rule should now look like the image below. 2. We will now check to make sure your load balancer is working. There is currently only one instance (or target) running in the auto-scaling pool, but you should be able to access the site. Return to your load balancer page by selecting Load Balancer from the menu on the left. In the \u0026ldquo;Description\u0026rdquo; tab, copy the DNS name and paste into the web browser. You should now see the site being loaded from your auto-scaling pool. For this page to open, you will need it in the next step.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-4-connect-to-your-linux-instance/",
	"title": "Connect to your Linux instance",
	"tags": [],
	"description": "",
	"content": "Connect to your Linux instance Download MobaXterm Go to EC2 Select Instances, select EC2 Public, select Details and copy Public IPv4 address After downloading MobaXterm in the main interface, select Session In the Session settings interface, select SSH Enter Remote host: enter Public IPv4 address Specify username: enter ec2-user Use private key select the path of the key file ending in .pem created and downloaded to your device. Press Ok and connect successfully as shown below. "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-4-create-security-group/",
	"title": "Create a security group",
	"tags": [],
	"description": "",
	"content": " Create a security group Click the Security Group menu then click the Create Security Group button.\nEnter the Security group name and Description as shown on the below screen and select the VPC you created in this lab.\nKey value Security group name webserver-sg Description security group for web servers VPC VPC-Lab Add a rule to Inbound Rules as shown below and click the Create Security Group button.\nType Source HTTP Custom: [Input your private IP address followed by a /32](You can find your local IP by searching what is my IP. ) SSH Custom: [Input your private IP address followed by a /32](You can find your local IP by searching what is my IP. ) 4. Review that the inbound rule has been created as shown below. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-4-request-validation/",
	"title": "Request validation",
	"tags": [],
	"description": "",
	"content": " In this section, we will use the console to set up request validation and only validate the body.\nSelect API *CalculatePrice * and select POST method . Select Method Request Select Validator pencil icon Request Validator in Settings. Select Validate body from the Request Validator drop-down list and then click the check mark icon to save your selection. Expand Request Body Click Add Model Input for Content-Typeapplication/json Select costCalculatorRequest for the model name Click the check mark icon to confirm. Return to the API Gateway dashboard and select the POST integration method to test the API. Go back to the API Gateway console and select the POST integration method to test out the API. Click the Test icon to provide a sample request message. Copy and Paste the following JSON Form into the Request Body {\r\u0026#34;price\u0026#34;: \u0026#34;400000\u0026#34;,\r\u0026#34;size\u0026#34;: \u0026#34;1600\u0026#34;,\r\u0026#34;unit\u0026#34;: \u0026#34;sqFt\u0026#34;,\r\u0026#34;downPayment\u0026#34;: \u0026#34;20\u0026#34;\r} Click Test Notice that this time, the message fails with the message Invalid request body. Request validation failed because price, size and Prepayment are defined as numbers in our model/schema. Remove quotation marks (\u0026quot; \u0026ldquo;) from price, size and deposit and retry your request.\nClick the Test icon to provide a sample request message. Copy and Paste the following JSON Form into the Request Body {\r\u0026#34;price\u0026#34;: 40000,\r\u0026#34;size\u0026#34;: 1600,\r\u0026#34;unit\u0026#34;: \u0026#34;sqFt\u0026#34;,\r\u0026#34;downPayment\u0026#34;: 20\r} Click Test You will see that the normal response is returned by the service. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-5-authentication-and-authorization/",
	"title": "Authentication and Authorization",
	"tags": [],
	"description": "",
	"content": " Create Cognito User Group From the service menu, select Security, Identity \u0026amp; Compliance and then select access Cognito\nClick Manage User Pools\nClick Create User Pools Enter CostCalculatorUserPool\nClick Step through Settings Click the App Clients menu from the left navigation pane\nClick Add an app client\nEnter Cost-Calculator-App-Client\nUncheck Create Client Secret\nCheck Enable username password auth for admin APIs for authentication (ALLOW_ADMIN_USER_PASSWORD_AUTH) Leave all other default fields and click Create app client\nClick on Review from the navigation pane\nLeave all fields as default and click Create Pools\nClick App client settings Create a user The next step is to create users that will be allowed to call our CostCalculatorAPI. From the CostCalculatorUserPool, perform the following:\nClick Users and Groups from the left navigation pane of CostCalulatorUserPool Click Create User Enter the following values: Username: testUser Send invitations to new users? Unchecked Temporary password: testUser123! Phone number: +14325551212 Mark phone number as verified? Test E-mail: enter your e-mail address Mark email as verified? Test Click Create User Login as user Now that the user pool is configured, open up a terminal and use AWS CLI to simulate a login for the user.\nEnter the following command. Replace the user-pool-id , client-id: attributes aws cognito-idp admin-initiate-auth --user-pool-id \u0026lt;YOUR_POOL_ID\u0026gt; --client-id \u0026lt;YOUR_CLIENT_ID\u0026gt; --auth-flow ADMIN_NO_SRP_AUTH --auth-parameters \u0026#39;USERNAME=testUser,PASSWORD=\u0026#34;testUser123!\u0026#34;\u0026#39; The first response to this request should be an authentication challenge, prompting you that you need to change the password for the user. If you recall, when we created the user, it asked us to enter the temporary password, not the final password. {\r\u0026#34;ChallengeName\u0026#34;: \u0026#34;NEW_PASSWORD_REQUIRED\u0026#34;,\r\u0026#34;Session\u0026#34;: \u0026#34;...\u0026#34;,\r\u0026#34;ChallengeParameters\u0026#34;: {\r\u0026#34;USER_ID_FOR_SRP\u0026#34;: \u0026#34;testUser\u0026#34;,\r\u0026#34;requiredAttributes\u0026#34;: \u0026#34;[]\u0026#34;,\r\u0026#34;userAttributes\u0026#34;: \u0026#34;{\\\u0026#34;email_verified\\\u0026#34;:\\\u0026#34;true\\\u0026#34;,\\\u0026#34;phone_number_verified\\\u0026#34;:\\\u0026#34;true\\\u0026#34;,\\\u0026#34;phone_number\\\u0026#34;:\\\u0026#34;+14325551212\\\u0026#34;,\\\u0026#34;email\\\u0026#34;:\\ \u0026#34;user@eMail\\\u0026#34;}\u0026#34;\r}\r} Use the CLI to set the final password for the user. Replace the pool ID, client ID, username/pwd and the session attributes. The session value can be retrieved from the response to step 2. Ensure your final passwords contains lower case, upper case, number and character symbols. aws cognito-idp admin-respond-to-auth-challenge --user-pool-id \u0026lt;YOUR_POOL_ID\u0026gt; --client-id \u0026lt;YOUR_CLIENT_ID\u0026gt; --challenge-name NEW_PASSWORD_REQUIRED --challenge-response \u0026#34;USERNAME=testUser,NEW_PASSWORD=\u0026lt; FINAL_PASSWORD\u0026gt;\u0026#34; --session \u0026#34;\u0026lt;SESSION_VALUE_FROM_PREVIOUS_RESPONSE\u0026gt;\u0026#34; The output from this call must be a valid session {\r\u0026#34;ChallengeParameters\u0026#34;: {},\r\u0026#34;AuthenticationResult\u0026#34;: {\r\u0026#34;AccessToken\u0026#34;: \u0026#34;...\u0026#34;,\r\u0026#34;ExpiresIn\u0026#34;: 3600,\r\u0026#34;TokenType\u0026#34;: \u0026#34;Bearer\u0026#34;,\r\u0026#34;RefreshToken\u0026#34;: \u0026#34;...\u0026#34;,\r\u0026#34;IdToken\u0026#34;: \u0026#34;...\u0026#34;\r}\r} Update API Gateway Authentication Access API Gateway\nClick on Price CalculatePrice API\nClick Authorizer on the navigation menu\nClick Create New Authorizer\nEnter the following values:\nName:CostCalculatorUserPool Type: Cognito Cognito Region: (or your region)us-east-1 Cognito user Pool:CostCalculatorUserPool Token source:method.request.header.Authorization Token validation: Click Create Check your Authorizer by setting return IdToken from above and click Test From the API Gateway Console, click Method Request\nClick the pencil icon next to Authorization , then select CostCalculatorUserPool\nClick the check mark to confirm Authorization icon. Authorization will be tested on the API in the next section.\n"
},
{
	"uri": "/3-security---aws-iam/3-1-iam-hands-on-lab/3-1-5-cleanup-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": " In EC2 console , delete dev-instance and prod-instance. In IAM console , delete all IAM Identities that you created. User groups: dev-group Users: dev-user Roles: IAMBucketTestRole Policies: DevPolicy, IAMBucketTestPolicy In S3 console , delete iam-test-user_name and iam-test-other-user_name bucket. Before deleting iam-test-user_name, you have to Empty bucket first.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-5-connect-to-ec2-instance-using-putty-optional/",
	"title": "Connect to EC2 Instance using PuTTy (Optional)",
	"tags": [],
	"description": "",
	"content": " Connect to EC2 Instance using PuTTy Start PuTTy if you need to download PuTTY).\nIn the Category pane, select Sessions.\nIn the Hostname box, enter ec2-user@[your public IP for the EC2 you created] .\nSet the Port value to 22. Under Connection Type , select SSH .\nIn the Catalog pane, expand Connections, expand SSH and select Authentication . Complete the following:\nSelect Browse . Select the .ppk file you created for your key pair and select Open . If this is your first time connecting to this instance, PuTTY will display a security warning dialog asking if you trust the server you are connecting to. Select Yes . A window opens and login as ec2 user and you are connected to your instance.\n"
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-5-elastic-ips-optional/",
	"title": "Elastic IPs (Optional)",
	"tags": [],
	"description": "",
	"content": " Elastic IPs (Optional) Follow these steps to assign an EIP to your Web Server:\nNavigate to Amazon EC2\nClick the Elastic IP link in the left panel of Amazon EC2 console\nClick Allocate Elastic IP address. Click Allocate to accept the default Elastic IP address settings. Allocate EIP Select EIP in the control panel. Click Action and select Associate Elastic IP address. Select the Web Server instance you created earlier from the Link Elastic IP Address window and then click Associate. "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-5-testing-the-auto-scaling-group/",
	"title": "Testing the Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": " Testing the Auto Scaling Group Now that you have created your Auto Scaling Group and load balancer, let\u0026rsquo;s test it to ensure that everything is working correctly.\nMake sure you are on the website accessed through the Load Balancer DNS address in the previous step.\nAt the bottom of the front page click on the Start CPU Load Generation link: Once the CPU load goes above 25% for a sustained period the Auto Scaling policy will begin spinning up the instances specified in the launch template to meet demand. (You may have to do this twice if the first time doesn\u0026rsquo;t generate enough load) In the \u0026ldquo;Instances\u0026rdquo; section of the EC2 Console you can watch for the new instances created by Auto Scaling, this might take a couple of minutes. Refresh the EC2 instances page and you should soon see a new instance spinning up automatically. You can select the instance named [Your Initials] - Auto Scaling Group and click on the Monitoring tab below to keep an eye on the \u0026ldquo;CPU Utilization\u0026rdquo;. You can also see this by going to Auto Scaling Groups page Then select your auto scaling group [Your Initials]-Lab-AutoScaling-Group . If you look at the details under the Instance management tab, you can see if new instances are spinning up. You can look at the Instance management tab to see how many instances there are in your group currently. The monitoring tab shows you different metrics like group size, pending instances, total instances, and much more. Your architecture should now look like this: Once a number of new instances have successfully started (probably 3 or 4), repeatedly refresh your web-browser on you web host. You should now see the Instance ID, Availability Zone and Private IP change as the load balancer distributes the requests across the Auto Scaling group. "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-5-vpc-flow-logs-optional/",
	"title": "VPC Flow Logs (Optional)",
	"tags": [],
	"description": "",
	"content": " Create VPC Flow Logs VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data can be published to Amazon CloudWatch Logs or Amazon S3. After you create a flow log, you can retrieve and view its data in the chosen destination.\nFlow logs can help you with a number of tasks, such as:\nDiagnosing overly restrictive security group rules Monitoring the traffic to your instance Determine the direction of traffic to and from network interfaces Flow log data is collected outside of the path of your network traffic, and therefore does not affect network throughput or latency. You can create or delete flow logs without any risk of impact to network performance.\nIn this lab, Stream data will be published to Amazon CloudWatch Logs.\nPrerequisites:\nDownload the CloudFormation template \u0026ldquo;VPC-Flow-Logs-Lab.yaml\u0026rdquo; by right clicking this link and save it to your local hard drive. Search for CloudFormation or select the Services menu and click CloudFormation in the \u0026ldquo;Management \u0026amp; Administration\u0026rdquo; section. CloudFormation Dashboard, select the Create Stack button. In \u0026ldquo;Sample Source\u0026rdquo;, select Upload a template file and then select Choose File \u0026ldquo;VPC-Flow-Logs-Lab.yaml\u0026rdquo; button that you downloaded in the first step, Click the Next button. On the Specify Stack Details page, fill in the following fields: Stack Name: [Your Initials]-VPC-Flow-Logs. InstanceType: t2.micro VPC: VPC-Lab PublicSubnet: (public subnet A) Once you have finished entering the details above, click Next. On the next page leave the default and select Next. On the Review [Your Initials]-VPC-Flow-Logs page, your settings, and under Capabilities, select the confirmation checkbox and click Create Stack. Wait until \u0026ldquo;Logical ID\u0026rdquo; \u0026ldquo;[Your Initials]-VPC-Flow-Logs\u0026rdquo; shows \u0026ldquo;CREATE_COMPLETE\u0026rdquo; status. You will need to click the refresh button to get the updated status of your stack. Confirm the successful setup of your instance In the same cloud structure stack page, click on the Output tab where we can see the PublicDNS and PublicIP of the EC2 instance that was created. Right click on PublicDNS. This will launch a test html page. This version will be used to generate some traffic that can be viewed in the VPC Stream log.\nEnable VPC Flow Log In the AWS Console, search for VPC click on VPC under \u0026ldquo;Networking \u0026amp; Content Delivery\u0026rdquo;. In the VPC services page, click your VPC menu on the left sidebar, then select VPC-Lab. At the bottom, navigate to Flow Logs and click Create flow log. On the Streaming Log page, fill in the following fields: Name - Options: [VPC-Lab-Flow-Log].\nMaximum synthesis time: 1 minute\nDestination: Send to CloudWatch Logs .\nDestination Log Group: VPCFlowLogGroup\nIAM role: RoleForVPCFlowLogs\nLog record format: default AWS format.\nOnce the details are filled in as above, click Create flow log at the bottom of the screen.\nView logs on CloudWatch. In the AWS Console, search for CloudWatch or select the Services menu and click CloudWatch under \u0026ldquo;Management \u0026amp; Administration\u0026rdquo;.\nClick the Log menu then select Log group, click VPCFlowLogGroup . In the Log streams we can see the interface used by the test EC2 instance. Click on the eni name. In the Log events page, we can see the Stream Log of the interface. You can now refresh the EC2 test site and check if you can see your local IP logged in the Flow Log.\n"
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-6-apideployment/",
	"title": "API Deployment",
	"tags": [],
	"description": "",
	"content": " At this point, we\u0026rsquo;ve tested our API using the API Gateway console. Now that we have created the necessary configuration for authorization, we are ready to deploy our API.\nSelect the POST method from the API Gateway dashboard for the pricepermeter method of the Calculation API\nSelect Action and then select Deploy API Select [New Stage] from the Deployment Stage drop-down\nEnter the following values:\nStage name:dev Stage description: Development stage for calculate price API Deployment Deployment Description:Initial Deployment Click Deploy\nExpand the dev stage, and click on the POST method of the pricepermeter method.\nUp to this point, we\u0026rsquo;ve been using the local API Gateway console to test our API. Now that we have implemented the API, we can test it with external tools. For this lab, we\u0026rsquo;ll be leveraging PostMan to test our API.\nSkip account registration\nClick Create a Request\nInsert API/Call URL in request URL textbox\nChange method type to POST from GET\nClick Headers. Insert the following properties\nKey: Authorization Value: [Your IdToken] Click Body tab for Request\nSelect the raw type in the radio buttons/drop-down\nChange type Content to JSON\nInsert the following request\n{\r\u0026#34;price\u0026#34;: 40000,\r\u0026#34;size\u0026#34;: 1600,\r\u0026#34;unit\u0026#34;: \u0026#34;sqFt\u0026#34;,\r\u0026#34;downPayment\u0026#34; : 20\r} Click Send "
},
{
	"uri": "/1-compute---amazon-ec2/1-3-auto-scalin--on-aws/1-3-1ec2-auto-scaling/1-3-1-6-auto-scaling-lab-teardown/",
	"title": "Auto Scaling Lab Teardown",
	"tags": [],
	"description": "",
	"content": " Deleting your Load Balancer Navigate to the \u0026ldquo;EC2\u0026rdquo; service. From the left menu under \u0026ldquo;Load Balancing\u0026rdquo;, select Load Balancers.\nSelect a load balancer named [Your initials]-Application-Load-Balancer .\nClick the Actions drop-down menu and select Delete. Next, select the Yes, Delete button. Your load balancer will disappear immediately if your removal is successful.\nDelete your target group Navigate to the \u0026ldquo;EC2\u0026rdquo; service. From the left menu under \u0026ldquo;Load Balancing\u0026rdquo;, select Target Group .\nSelect a target group named [Your initials]-Target-Group\nClick the Actions drop-down menu and select Delete. Next, select the Yes, Delete button.\nYour target group will now be deleted. Delete your Auto Scaling group Navigate to the \u0026ldquo;EC2\u0026rdquo; service. From the left menu under \u0026ldquo;Auto-scaling\u0026rdquo; select Auto Scaling Groups.\nSelect the auto-scaling group named [Your initials]-Lab-AutoScaling-Group\nClick the Delete button next, enter delete in the text field and select the Delete button.\nAll instances in your auto-scaling pool will now be terminated, which may take several minutes to complete. Remove your launcher template Navigate to the \u0026ldquo;EC2\u0026rdquo; service. From the left menu under \u0026ldquo;Instances\u0026rdquo;, select Launch Template .\nSelect a launch template named [Your initials]-scaling-template .\nClick the Delete button next, enter delete in the text field and select the Delete button. Deleting your Security Groups Navigate to the \u0026ldquo;EC2\u0026rdquo; service. From the left menu under \u0026ldquo;Network \u0026amp; Security\u0026rdquo;, select Security Group .\nSelect the security group named [Your initials]-SG-Load-Balancer and click the Edit Inbound Rule button.\nOn the \u0026ldquo;Edit Inbound Rule\u0026rdquo; page, click the Delete button to delete a rule, and then select the Save Rule button.\nSelect the Outbound rules tab and select the Edit Outbound Rule button.\nOn the \u0026ldquo;Edit Outgoing Rule\u0026rdquo; page, click the Delete button to delete a rule, and then select the Save Rule button.\nSelect the security group name [Your initials] - Auto Scaling SG and repeat steps 2 \u0026amp; 3. (No need to delete outbound rules on this security group)\nNow select two security groups named [Your Initials]-SG-Load-Balancer and [Your Initials] - Auto Scaling SG.\nClick the Actions drop-down menu and select Delete security group. (You may have to scroll down in the Actions menu) In the next window, enter delete in the text field and select the Delete button.\nYour security groups should now be deleted. Deleting your CloudFormation Stack Open CloudFormation in services or by search.\nSelect the tile named [Your initials]-EC2-Web-Host and then select the Delete button.\nIn the popup, select Delete stack .\nThe stack will take a few minutes to clear, select the refresh button to see the updated status. "
},
{
	"uri": "/1-compute---amazon-ec2/1-2-ec2-windows-hands-on-lab/1-2-6-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": " Clean up resources To delete the EC2 instance you created, select the instance you created in this lab. From the menuÂ StatusÂ version selectÂ **End VersionÂ **. Confirm that you want to terminate the instance by clicking the TerminateÂ button in the pop-up window. "
},
{
	"uri": "/2-network---amazon-vpc/2-1-vpc-hands-on-lab/2-1-6-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": " Clean up your resources In the AWS CloudFormation Console\nSelect [Your initials]-VPC-Flow-Logs Click Delete Click Clear Stack in the pop-up window. Select the VPC you created in this lab from the VPC menu, then click Delete VPC from the Actions menu to delete it. "
},
{
	"uri": "/1-compute---amazon-ec2/1-1-ec2-linux-hands-on-lab/1-1-6-clean-up-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": " Clean Up Resources Delete the EC2 instance you created, select the instance you created in the lab. From the Instance Status menu, select Terminate Instance. A pop-up asks if you are sure you want to terminate the case. Click Terminate. Up for the challenge Deploy the same EC2 instance using AWS CLI.\nUse AWS Cloud9 to complete this challenge. It has AWS CLI installed.\nResources \u0026amp; Documentation AWS CLI Documentation AWS CLI Configuration "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-7-message-caching-optional/",
	"title": "Message Caching (Optional)",
	"tags": [],
	"description": "",
	"content": " Create a new resource From the API Gateway Dashboard, select the price calculation API root element\nClick Actions , then select Create Resource Enter the following values\nResource name: medianPriceCalculator Click Create Resource\nClick Actions , then select Create Method.\nSelect POST and select the check mark.\nFor Post Setup, select the following values:\nIntegration Type: Lambda Function Lambda region: (or region of your choice)us-east-1 Lambda function: (Select the function that appears.)serverless-immersion-day-MedianPriceCalculator- Click Save , then click Ok on the pop-up window.\nEnable caching In this example, we will create a query parameter to store the results based on the region attribute. Region can receive US or CA , United States or Canada values respectively.\nClick the POST method of the medianpriceCalculator API. From the API Console, click Method Request Expand URL Query String Parameter. Click Add Query String Enter the name region Click the check mark icon Check caching Now that we are passing the region parameter as a query, we need to map that parameter to the built-in payload.\nClick medianpricecalculator and then click POST action .\nClick Integration Request from the API Console Extending mapping Template\nClick When no template is defined (recommended)\nClick Add Mapping Template\nInput for content type application/json\nClick the check mark icon\nClick on the application/json content type.\nEnter the following mapping for the \u0026ldquo;application/json\u0026rdquo; template\n{\r\u0026#34;region\u0026#34;: \u0026#34;$input.params(\u0026#34;region\u0026#34;)\u0026#34;\r} Click Save At this point, we\u0026rsquo;re basically taking the region value from the query parameter and mapping it to the request.\nDeploy the API Now it\u0026rsquo;s time to implement our new API.\nClick POST method of medianpricecalculator Click Action Click Deploy API Choose a dev stage Enter an option description Add new method with caching. Click Deploy Now that the method is implemented, we can go ahead and enable caching.\nClick Stages under the CalculatePrice API\nClick dev stage\nCheck Enable API Cache\nSelect Cache: 0.5GB\nEnter Cache time-to-live (TTL): 60\nLeave all other fields as default Click Save Changes\nFrom the dev stage, click pricepermeter\nClick POST method\nSelect Override for the method\nUncheck Enable Method Cache (this option is unchecked by default) Click Save Changes Go ahead and create a new API using PostMan. Click Create a Request\nEnter the copied calling URL and append ?region=US to the end of the URL\nChange method type to POST from GET\nClick Body tab for Request\nSelect the raw type in the radio buttons/drop-down\nChange the Content type to JSON Click Send\n"
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-8-usage-plansmessage-throttling/",
	"title": "Usage Plans and Message Throttling (Optional)",
	"tags": [],
	"description": "",
	"content": " Setting up API Keys Open the API Gateway console. In the main navigation pane of the API Gateway, select APIÂ calculateÂ price by clicking on the name Then click actionÂ POSTÂ of the methodÂ medianpricecalculator SelectÂ Method Request In the SettingsÂ section, select trueÂ forÂ API Key RequiredÂ . Select the check mark icon to save the settings. SelectÂ ActionÂ thenÂ Deploy APIÂ . Enter the following values: Stage name: dev Deployment Description: Adding API Key ClickÂ Deploy Now that our API requires an API key, we have to generate one.\nIn the API Gateway main navigation pane, select API KeyÂ . From the drop-down menuÂ ActionÂ , selectÂ Create API KeyÂ . Enter the following values: Name: calculatePriceKey API key: Auto Generate Description:Main key for calculatePrice API Click Save You may need to click onÂ APIÂ and select APIÂ calculateÂ price to return to the full navigation menu.\nSet up a usage plans Once the API keys are generated, the next step is to create a Usage Plan.\nIn the Amazon API Gateway main navigation pane, SelectÂ Usage Plan Click CreateÂ to create a new usage plan. In the Create usage plan section, enter the following: Name: Platinum Description: Exclusive plan for our best customers. SelectÂ Enable throttling Throttling \u0026gt; Rate:100 Throttlong \u0026gt; Burst:200 SelectÂ Enable Quota Quota: 5000 requests per Month. SelectÂ NextÂ . SelectÂ Add API Stage Select APIÂ calculate price SelectÂ devÂ development stage Select iconÂ check mark to confirm Click Next ClickÂ Add API Key to Usage Plan Type: calculatePriceKey and select item when it comes up Click iconÂ checkmark to confirm Click Done While on tabÂ Details, click Configure Method ThrottlingÂ underÂ Linked API Stages Click Add Resource/Method Use the following values: Resource: /mediapricecalculator Method: POST Rate: 100 Burst: 200 Click iconÂ check mark to confirm ClickÂ Close API Testing with Usage Plan In this lab, we will use Postman to test our deployed service with an API Key.\nIn the Amazon API Gateway main navigation pane, choose API Keys\nSelectÂ calculatePriceKey\nClick Show to reveal the API Key\nCopyÂ API key Using Postman, configure as follows\nSelect the medianpricecalculator in POSTMAN\nSet Titlex-api-key . attribute\nSet the value with Your API Key\nClick Send\nCall the method few (10+) times and then go to usage plan to see the remaining calls.\nIn the Amazon API Gateway main navigation pane, select Usage Plans Click Platinum plan Click API Keys Click Usage Click Extensions Observe the number of requests still available. "
},
{
	"uri": "/2-network---amazon-vpc/2-2-amazonapi-gateway-hands-on-lab/2-2-9-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": " In Amazon API Gateway Console Select the Price calculation by clicking the radio button next to it Click Delete from the Actions menu Click Delete in the pop-up window Delete API Key Select calculatePriceKey and select Delete API Key Click Delete in the pop-up window Delete Usage Plans\nSelect the Platinum plan and select Delete usage plan from the Action menu Click Delete in the pop-up window In Amazon Cognito Console Click Manage User Pools Click CostCalculatorUserPool Click Delete Pools Type delete in popup and Click Delete pool In the AWS CloudFormation Console Select serverless-immersion-day-stack Click Delete Click Delete Stack in the pop-up window "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]